#!/usr/bin/python -u

import sys
import os
from optparse import OptionParser
import ConfigParser
import logging
import time
from packratAgent.libdaemon import Daemon
from packratAgent.Packrat import Packrat
from packratAgent.Apt import AptManager
from packratAgent.Yum import YUMManager
from packratAgent.Yast import YaSTManager
from packratAgent.Json import JSONManager


class PackratAgent( Daemon ):
  def __init__( self, interactive ):
    super( PackratAgent, self ).__init__( 'packratAgent', '/var/run/packratAgent.pid', interactive, '/var/log/packratAgent.err' )
    self.gpg_key = None
    self.repos = {}
    self.style = 'combined'

  def updateRepo( self, repo_uri, package_list=None ):
    repo = self.repos[ repo_uri ]
    logging.info( 'Update repo "%s"' % repo[ 'description' ] )
    if repo[ 'manager_type' ] == 'apt':
      manager = AptManager( '%s/apt/%s' % ( self.root_dir, repo[ 'release_type' ] ), 'main', repo[ 'description' ], self.mirror[ 'description' ], self.gpg_key )
    elif repo[ 'manager_type' ] == 'yum':
      manager = YUMManager( '%s/yum/%s' % ( self.root_dir, repo[ 'release_type' ] ), 'main', repo[ 'description' ], self.mirror[ 'description' ], self.gpg_key )
    elif repo[ 'manager_type' ] == 'yast':
      manager = YaSTManager( '%s/yast/%s' % ( self.root_dir, repo[ 'release_type' ] ), 'main', repo[ 'description' ], self.mirror[ 'description' ], self.gpg_key )
    elif repo[ 'manager_type' ] == 'json':
      manager = JSONManager( '%s/json/%s' % ( self.root_dir, repo[ 'release_type' ] ), 'main', repo[ 'description' ], self.mirror[ 'description' ], self.gpg_key )
    else:
      logging.warning( 'Unknown Manager Type "%s", skipped.' % repo[ 'manager_type' ] )
      return

    if package_list is None:
      package_list = self.packrat.getPackages( repo_uri )

    for package_uri in package_list:
      logging.debug( 'Checking Package "%s"' % package_uri )
      file_list = self.packrat.getPackageFiles( repo_uri, package_uri )

      for file in file_list:
        file = file_list[ file ]
        basename = os.path.basename( file[ 'file' ] )
        distro = self.packrat.getDistroVersion( file[ 'distroversion' ] ) # should cache this too

        if not manager.checkFile( basename, distro[ 'distro' ], distro[ 'version' ], file[ 'arch' ] ):
          logging.debug( 'Retrieving "%s"...' % basename )
          wrkfile = self.packrat.getFile( file[ 'file' ] )
          manager.loadFile( basename, wrkfile, distro[ 'distro' ], distro[ 'version' ], file[ 'arch' ] )

        manager.addEntry( file[ 'type' ], basename, distro[ 'distro' ], distro[ 'version' ], file[ 'arch' ] )

    logging.debug( 'Writing Metadata...' )
    manager.writeMetadata()

  def main( self ):
    self.cont = True

    logging.info( 'Starting...' )

    logging.info( 'Running...' )
    while self.cont:
      self.repos = {}
      self.packrat.syncStart()
      self.mirror = self.packrat.getMirror()
      for repo_uri in self.mirror[ 'repo_list' ]:
        self.repos[ repo_uri ] = self.packrat.getRepo( repo_uri )

      for repo_uri in self.repos:
        self.updateRepo( repo_uri )

      self.packrat.syncComplete()

      time.sleep( 600 )

    logging.info( 'Done.' )
    return True

  def do_stop( self ):
    logging.info( 'Stopping...' )
    self.cont = False

  def do_loadconfig( self ):
    logging.info( 'Loading Config...' )
    config = ConfigParser.ConfigParser()
    try:
      if not config.read( '/etc/packrat/mirror.conf' ):
        logging.critical( 'Error opening config file' )
        return False

    except:
      logging.exception( 'Error Parsing config file' )
      return False

    try:
      self.packrat = Packrat( config.get( 'packrat', 'host' ), config.get( 'packrat', 'proxy' ), config.get( 'packrat', 'name' ), config.get( 'packrat', 'psk' ) )
    except ConfigParser.Error as e:
      logging.exception( 'Error retreiving host, proxy, name, and/or psk from config file' )
      return False

    try:
      self.root_dir = config.get( 'repo', 'root_dir' )
    except ConfigParser.Error as e:
      logging.exception( 'Error retreiving root_dir from config file' )
      return False

    try:
      self.gpg_key = config.get( 'repo', 'gpg_sign_key' )
      if not self.gpg_key:
        self.gpg_key = None
    except ConfigParser.Error as e:
      self.gpg_key = None

    try:
      self.style = config.get( 'mirror', 'style' )
      if not self.style:
        self.style = 'combined'
    except ConfigParser.Error as e:
      self.style = 'combined'

    if self.style not in ( 'combined', 'split' ):
      logging.error( 'Style is not "combined" nor "split"' )
      self.style = None
      return False

    return True

def print_usage():
  print 'Usage %s {interactive|start|stop|kill|restart|reload_config|status}' % sys.argv[0]

try:
  mode = sys.argv[1]
except IndexError:
  print_usage()
  sys.exit( 1 )

interactive = ( mode == 'interactive' )

daemon = PackratAgent( interactive )

if mode == 'stop':
  if not daemon.stop():
    sys.exit( 1 )
  sys.exit( 0 )

if mode == 'kill':
  if not daemon.kill():
    sys.exit( 1 )
  sys.exit( 0 )

if mode == 'status':
  print 'Status: %s' % daemon.status()
  sys.exit( 0 )

if mode == 'restart':
  if not daemon.restart():
    sys.exit( 1 )
  sys.exit( 0 )

if mode == 'reload_config':
  if not daemon.reload_config():
    sys.exit( 1 )
  sys.exit( 0 )

if interactive or mode == 'start':
  if not daemon.start():
    sys.exit( 1 )
  sys.exit( 0 )

print_usage()
sys.exit( 1 )
