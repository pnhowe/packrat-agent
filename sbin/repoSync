#!/usr/bin/python -u

import sys
import os
from optparse import OptionParser
import ConfigParser
import logging
from packratAgent.Packrat import Packrat
from packratAgent.Apt import AptManager
from packratAgent.Yum import YUMManager
from packratAgent.Zypper import ZypperManager

oparser = OptionParser( description='Repo Mirror Sync' )

oparser.add_option( '-v', '--verbose', dest='verbose', default=False, action='store_true' )

( options, args ) = oparser.parse_args()

logging.basicConfig()
logger = logging.getLogger()

if options.verbose:
  logger.setLevel(logging.DEBUG)

config_file = ConfigParser.ConfigParser()

try:
  config_file.read( '/etc/packrat/mirror.conf' )
except ConfigParser.Error as e:
  print 'Error reading config file:'
  print e
  sys.exit( 1 )

try:
  packrat = Packrat( config_file.get( 'mirror', 'host' ), config_file.get( 'mirror', 'proxy' ), config_file.get( 'mirror', 'name' ), config_file.get( 'mirror', 'psk' ) )
except ConfigParser.Error as e:
  print 'Error retreiving host, proxy, name, and/or psk from config file'
  sys.exit( 1 )

try:
  root_dir = config_file.get( 'mirror', 'root_dir' )
except ConfigParser.Error as e:
  print 'Error retreiving root_dir from config file'
  sys.exit( 1 )

try:
  gpg_key = config_file.get( 'mirror', 'gpg_sign_key' )
  if not gpg_key:
    gpg_key = None
except ConfigParser.Error as e:
  gpg_key = None

mirror = packrat.getMirror()
print 'Last Sync was from %s to %s' % ( mirror[ 'last_sync_start' ], mirror[ 'last_sync_complete' ] )

packrat.syncStart()

print 'Processing Repos....'
for repo_uri in mirror[ 'repo_list' ]:
  repo = packrat.getRepo( repo_uri )
  print 'Processing repo "%s"' % repo[ 'description' ]
  if repo[ 'manager_type' ] == 'apt':
    manager = AptManager( '%s/apt/%s' % ( root_dir, repo[ 'release_type' ] ), 'main', repo[ 'description' ], mirror[ 'description' ] )
  elif repo['manager_type'] == 'yum':
    manager = YUMManager( '%s/yum/%s' % ( root_dir, repo[ 'release_type' ] ), 'main', repo[ 'description' ], mirror[ 'description' ] )
  elif repo['manager_type'] == 'zypper':
    manager = ZypperManager( '%s/zypper/%s' % ( root_dir, repo[ 'release_type' ] ), 'main', repo[ 'description' ], mirror[ 'description' ] )
  else:
    print 'Unknown Manager Type "%s", skipped.' % repo[ 'manager_type' ]
    continue

  #TODO: When packrat master can .unique() the restuls of getPAckages,
  # this can be fixed
  for package_uri in packrat.getPackages( repo_uri ):
    print '  Checking Package "%s"' % package_uri
    file_list = packrat.getPackageFiles( repo_uri, package_uri )

    for file in file_list:
      file = file_list[ file ]
      basename = os.path.basename( file[ 'file' ] )
      distro = packrat.getDistroVersion( file[ 'distroversion' ] )

      if not manager.checkFile( basename, distro[ 'distro' ], distro[ 'version' ], file[ 'arch' ] ):
        print '    Retrieving "%s"...' % basename
        wrkfile = packrat.getFile( file[ 'file' ] )
        manager.loadFile( basename, wrkfile, distro[ 'distro' ], distro[ 'version' ], file[ 'arch' ] )

      manager.addEntry( file[ 'type' ], basename, distro[ 'distro' ], distro[ 'version' ], file[ 'arch' ] )
  print '  Writing Metadata...'
  manager.writeMetadata()

  if gpg_key:
    print '  Signing...'
    manager.sign( gpg_key )

packrat.syncComplete()
print 'Done!'
